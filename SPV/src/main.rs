#![windows_subsystem = "windows"]
//-----------------------------------------------------------------------------------------------------------------------------------------------
use crate::epaint::TextureId;
use eframe::{egui, epi};
use egui::epaint;
//-----------------------------------------------------------------------------------------------------------------------------------------------
fn main() {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let app = Canvas::default();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let options = eframe::NativeOptions {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        transparent: true,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        ..Default::default()
    };
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    eframe::run_native(Box::new(app), options);
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
fn position(distance: f64, right_ascension: f64, declination: f64) -> (f64, f64, f64) {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let x =
        distance * (right_ascension.to_radians()).cos() * ((declination + 90.).to_radians()).sin();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let y =
        distance * (right_ascension.to_radians()).sin() * ((declination + 90.).to_radians()).sin();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let z = distance * ((declination + 90.).to_radians()).cos();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    return (x, y, z);
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
fn velocity(
    x: f64,
    y: f64,
    z: f64,
    radial_velocity: f64,
    distance: f64,
    right_ascension: f64,
    declination: f64,
    proper_motion_ra: f64,
    proper_motion_dec: f64,
) -> (f64, f64, f64) {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    //Vector normalizing with the invers square root
    let mut normalized_vector_x = 0.;
    let mut normalized_vector_y = 0.;
    let mut normalized_vector_z = 0.;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    if radial_velocity < 0. {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_x =
            x / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_y =
            y / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_z =
            z / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        /*
        normalized_vector_x = (0_f64 - x)
            * (1. / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt());
        normalized_vector_y = (0_f64 - y)
            * (1. / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt());
        normalized_vector_z = (0_f64 - z)
            * (1. / ((0_f64 - x).powf(2.) + (0_f64 - y).powf(2.) + (0_f64 - z).powf(2.)).sqrt());
        */
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    else if radial_velocity > 0. {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_x = x / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_y = y / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_z = z / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        /*
        normalized_vector_x = x * (1. / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt());
        normalized_vector_y = y * (1. / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt());
        normalized_vector_z = z * (1. / (x.powf(2.) + y.powf(2.) + z.powf(2.)).sqrt());
        */
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    else {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_x = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_y = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        normalized_vector_z = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let radial_velocity_vector_x = normalized_vector_x * radial_velocity;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let radial_velocity_vector_y = normalized_vector_y * radial_velocity;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let radial_velocity_vector_z = normalized_vector_z * radial_velocity;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let proper_motion_x = distance
        * ((right_ascension + (((proper_motion_ra) / (3.154 * 10_f64.powf(7.))) / 3600.))
            .to_radians())
        .cos()
        * (((declination + (((proper_motion_dec) / (3.154 * 10_f64.powf(7.))) / 3600.)) + 90.)
            .to_radians())
        .sin();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let proper_motion_y = distance
        * ((right_ascension + (((proper_motion_ra) / (3.154 * 10_f64.powf(7.))) / 3600.))
            .to_radians())
        .sin()
        * (((declination + (((proper_motion_dec) / (3.154 * 10_f64.powf(7.))) / 3600.)) + 90.)
            .to_radians())
        .sin();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let proper_motion_z = distance
        * (((declination + (((proper_motion_dec) / (3.154 * 10_f64.powf(7.))) / 3600.)) + 90.)
            .to_radians())
        .cos();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let normalized_vector_proper_motion_x = (proper_motion_x - x)
        / ((proper_motion_x - x).powf(2.)
            + (proper_motion_y - y).powf(2.)
            + (proper_motion_z - z).powf(2.))
        .sqrt();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let normalized_vector_proper_motion_y = (proper_motion_y - y)
        / ((proper_motion_x - x).powf(2.)
            + (proper_motion_y - y).powf(2.)
            + (proper_motion_z - z).powf(2.))
        .sqrt();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let normalized_vector_proper_motion_z = (proper_motion_z - z)
        / ((proper_motion_x - x).powf(2.)
            + (proper_motion_y - y).powf(2.)
            + (proper_motion_z - z).powf(2.))
        .sqrt();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    /*
    let normalized_vector_proper_motion_x = (proper_motion_x - x)
        * (1.
            / ((proper_motion_x - x).powf(2.)
                + (proper_motion_y - y).powf(2.)
                + (proper_motion_z - z).powf(2.))
            .sqrt());
    let normalized_vector_proper_motion_y = (proper_motion_y - y)
        * (1.
            / ((proper_motion_x - x).powf(2.)
                + (proper_motion_y - y).powf(2.)
                + (proper_motion_z - z).powf(2.))
            .sqrt());
    let normalized_vector_proper_motion_z = (proper_motion_z - z)
        * (1.
            / ((proper_motion_x - x).powf(2.)
                + (proper_motion_y - y).powf(2.)
                + (proper_motion_z - z).powf(2.))
            .sqrt());
    */
    let vector_proper_motion_x = normalized_vector_proper_motion_x * proper_motion_x;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let vector_proper_motion_y = normalized_vector_proper_motion_y * proper_motion_y;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let vector_proper_motion_z = normalized_vector_proper_motion_z * proper_motion_z;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let x_v = radial_velocity_vector_x + vector_proper_motion_x;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let y_v = radial_velocity_vector_y + vector_proper_motion_y;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let z_v = radial_velocity_vector_z + vector_proper_motion_z;
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    return (x_v, y_v, z_v);
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
use serde::{Deserialize, Serialize};
//-----------------------------------------------------------------------------------------------------------------------------------------------
#[derive(Serialize, Deserialize, Debug)]
//-----------------------------------------------------------------------------------------------------------------------------------------------
struct Export {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    x_pos: f64,
    y_pos: f64,
    z_pos: f64,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    x_vel: f64,
    y_vel: f64,
    z_vel: f64,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    name: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
use serde_json;
use std::fs::File;
use std::io::{BufWriter, Write};
//-----------------------------------------------------------------------------------------------------------------------------------------------
fn export_json(x: f64, y: f64, z: f64, x_v: f64, y_v: f64, z_v: f64, name_str: String) {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let data = Export {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        x_pos: x,
        y_pos: y,
        z_pos: z,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        x_vel: x_v,
        y_vel: y_v,
        z_vel: z_v,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        name: name_str,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    };
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    // write out the file
    let writer = BufWriter::new(File::create("data.json").unwrap());
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    serde_json::to_writer_pretty(writer, &data).unwrap();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
fn export_txt(x: f64, y: f64, z: f64, x_v: f64, y_v: f64, z_v: f64, name_str: String) {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let data = Export {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        x_pos: x,
        y_pos: y,
        z_pos: z,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        x_vel: x_v,
        y_vel: y_v,
        z_vel: z_v,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        name: name_str,
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    };
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    let mut buffer = File::create("data.txt").unwrap();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    buffer
        .write_all(serde_json::to_string(&data).unwrap().as_bytes())
        .unwrap();
    //-----------------------------------------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
#[derive(Default)]
//-----------------------------------------------------------------------------------------------------------------------------------------------
pub struct Canvas {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    name_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    x: f64,
    y: f64,
    z: f64,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    x_v: f64,
    y_v: f64,
    z_v: f64,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    distance: f64,    //In Lightyears
    distance_km: f64, //In km
    distance_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    declination: f64, //degrees
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    declination_degree: f64, //In Degreees
    declination_degree_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    declination_min: f64, //In Minutes (')
    declination_min_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    declination_s: f64, //In Seconds ('')
    declination_s_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    right_ascension: f64, //degrees
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    right_ascension_h: f64, //In Hours
    right_ascension_h_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    right_ascension_min: f64, //In Minutes
    right_ascension_min_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    right_ascension_s: f64, //In Seconds
    right_ascension_s_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    radial_velocity: f64, //In km/s
    radial_velocity_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    proper_motion_ra: f64, //In Arcseconds/year
    proper_motion_ra_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    proper_motion_dec: f64, //In Arcseconds/year
    proper_motion_dec_str: String,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    general_img: TextureId,
    pos_vel_img: TextureId,
    export_img: TextureId,
    organize_img: TextureId,
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    general_toggle: bool,
    pos_vel_toggle: bool,
    export_toggle: bool,
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
impl epi::App for Canvas {
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn name(&self) -> &str {
        "SPV"
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    #[allow(unused_variables)]
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn setup(
        &mut self,
        ctx: &egui::CtxRef,
        frame: &mut epi::Frame<'_>,
        storage: Option<&dyn epi::Storage>,
    ) {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        #[cfg(feature = "persistence")]
        if let Some(storage) = storage {
            *self = epi::get_value(storage, epi::APP_KEY).unwrap_or_default()
        }
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        self.x_v = 0.;
        self.y_v = 0.;
        self.z_v = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        self.radial_velocity = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        self.proper_motion_dec = 0.;
        self.proper_motion_ra = 0.;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        let mut style: egui::Style = (*ctx.style()).clone();
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.extreme_bg_color = egui::Color32::from_rgb(255, 255, 250);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.faint_bg_color = egui::Color32::from_rgb(178, 176, 155);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.code_bg_color = egui::Color32::from_rgb(235, 231, 233);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.hyperlink_color = egui::Color32::from_rgb(255, 69, 0);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.override_text_color = Some(egui::Color32::from_rgb(32, 30, 31));
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.window_corner_radius = 0.1;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.button_frame = true;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.collapsing_header_frame = true;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.widgets.noninteractive.bg_fill = egui::Color32::from_rgb(235, 231, 233);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.widgets.inactive.bg_fill = egui::Color32::TRANSPARENT;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(255, 69, 0);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(255, 0, 0);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        style.visuals.widgets.open.bg_fill = egui::Color32::from_rgb(255, 0, 0);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        ctx.set_style(style);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        let image_data_general = include_bytes!("data/MenuGeneral.png");
        let image_general =
            image::load_from_memory(image_data_general).expect("Failed to load image");
        let image_buffer_general = image_general.to_rgba8();
        let size_general = (350 as usize, 100 as usize);
        let pixels_general = image_buffer_general.into_vec();
        let pixels_general: Vec<_> = pixels_general
            .chunks_exact(4)
            .map(|p| egui::Color32::from_rgba_unmultiplied(p[0], p[1], p[2], p[3]))
            .collect();

        // Allocate a texture:
        self.general_img = frame
            .tex_allocator()
            .alloc_srgba_premultiplied(size_general, &pixels_general);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        let image_data_pos_vel = include_bytes!("data/MenuPos&Vel.png");
        let image_pos_vel =
            image::load_from_memory(image_data_pos_vel).expect("Failed to load image");
        let image_buffer_pos_vel = image_pos_vel.to_rgba8();
        let size_pos_vel = (350 as usize, 100 as usize);
        let pixels_pos_vel = image_buffer_pos_vel.into_vec();
        let pixels_pos_vel: Vec<_> = pixels_pos_vel
            .chunks_exact(4)
            .map(|p| egui::Color32::from_rgba_unmultiplied(p[0], p[1], p[2], p[3]))
            .collect();

        // Allocate a texture:
        self.pos_vel_img = frame
            .tex_allocator()
            .alloc_srgba_premultiplied(size_pos_vel, &pixels_pos_vel);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        let image_data_export = include_bytes!("data/MenuExport.png");
        let image_export =
            image::load_from_memory(image_data_export).expect("Failed to load image");
        let image_buffer_export = image_export.to_rgba8();
        let size_export = (350 as usize, 100 as usize);
        let pixels_export = image_buffer_export.into_vec();
        let pixels_export: Vec<_> = pixels_export
            .chunks_exact(4)
            .map(|p| egui::Color32::from_rgba_unmultiplied(p[0], p[1], p[2], p[3]))
            .collect();

        // Allocate a texture:
        self.export_img = frame
            .tex_allocator()
            .alloc_srgba_premultiplied(size_export, &pixels_export);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        let image_data_organize = include_bytes!("data/MenuOrganize.png");
        let image_organize =
            image::load_from_memory(image_data_organize).expect("Failed to load image");
        let image_buffer_organize = image_organize.to_rgba8();
        let size_organize = (350 as usize, 100 as usize);
        let pixels_organize = image_buffer_organize.into_vec();
        let pixels_organize: Vec<_> = pixels_organize
            .chunks_exact(4)
            .map(|p| egui::Color32::from_rgba_unmultiplied(p[0], p[1], p[2], p[3]))
            .collect();

        // Allocate a texture:
        self.organize_img = frame
            .tex_allocator()
            .alloc_srgba_premultiplied(size_organize, &pixels_organize);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    #[cfg(feature = "persistence")]
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn save(&mut self, storage: &mut dyn epi::Storage) {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        epi::set_value(storage, epi::APP_KEY, self);
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn clear_color(&self) -> egui::Rgba {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        egui::Rgba::TRANSPARENT
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn warm_up_enabled(&self) -> bool {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        return true;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
    }
    //-----------------------------------------------------------------------------------------------------------------------------------------------
    fn update(&mut self, ctx: &egui::CtxRef, _frame: &mut epi::Frame<'_>) {
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        egui::SidePanel::left("Tabs").show(ctx, |ui| {
            if ui
                .add(egui::ImageButton::new(
                    self.general_img,
                    egui::Vec2::new(140., 40.),
                ))
                .clicked()
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            {
                self.general_toggle = !self.general_toggle
            }
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            if ui
                .add(egui::ImageButton::new(
                    self.pos_vel_img,
                    egui::Vec2::new(140., 40.),
                ))
                .clicked()
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            {
                self.pos_vel_toggle = !self.pos_vel_toggle
            }
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.separator();
            if ui
                .add(egui::ImageButton::new(
                    self.export_img,
                    egui::Vec2::new(140., 40.),
                ))
                .clicked()
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            {
                self.export_toggle = !self.export_toggle
            }

            ui.with_layout(egui::Layout::bottom_up(egui::Align::Center), |ui| {
                if ui
                    .add(egui::ImageButton::new(
                        self.organize_img,
                        egui::Vec2::new(140., 40.),
                    ))
                    .clicked()
                //-----------------------------------------------------------------------------------------------------------------------------------------------
                {
                    ui.ctx().memory().reset_areas();
                }
                ui.separator();
            });
        });
        egui::TopBottomPanel::bottom("Result").show(ctx, |ui| {
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.add(egui::Label::new(format!("Resulting position (km)")).heading());
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.add(
                egui::Label::new(format!(
                    "{:?}",
                    position(self.distance_km, self.right_ascension, self.declination)
                ))
                .monospace(),
            );
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.x = position(self.distance_km, self.right_ascension, self.declination).0;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.y = position(self.distance_km, self.right_ascension, self.declination).1;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.z = position(self.distance_km, self.right_ascension, self.declination).2;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.separator();
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.add(egui::Label::new(format!("Resulting velocity (km/s)")).heading());
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            ui.add(
                egui::Label::new(format!(
                    "{:?}",
                    velocity(
                        self.x,
                        self.y,
                        self.z,
                        self.radial_velocity,
                        self.distance,
                        self.right_ascension,
                        self.declination,
                        self.proper_motion_ra,
                        self.proper_motion_dec
                    )
                ))
                .monospace(),
            );
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.x_v = velocity(
                self.x,
                self.y,
                self.z,
                self.radial_velocity,
                self.distance,
                self.right_ascension,
                self.declination,
                self.proper_motion_ra,
                self.proper_motion_dec,
            )
            .0;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.y_v = velocity(
                self.x,
                self.y,
                self.z,
                self.radial_velocity,
                self.distance,
                self.right_ascension,
                self.declination,
                self.proper_motion_ra,
                self.proper_motion_dec,
            )
            .1;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
            self.z_v = velocity(
                self.x,
                self.y,
                self.z,
                self.radial_velocity,
                self.distance,
                self.right_ascension,
                self.declination,
                self.proper_motion_ra,
                self.proper_motion_dec,
            )
            .2;
            //-----------------------------------------------------------------------------------------------------------------------------------------------
        });

        egui::CentralPanel::default().show(ctx, |ui| {
            let naming_window = egui::Window::new("Name")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.general_toggle == true {
                ui.vertical(|ui| {
                    //-----------------------------------------------------------------------------------------------------------------------------------------------
                    naming_window.show(ctx, |ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("System name")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response = ui.add(egui::TextEdit::singleline(&mut self.name_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{}", self.name_str)).monospace());
                    });
                });
            }

            let distance_window = egui::Window::new("Distance")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.pos_vel_toggle == true {
                ui.vertical(|ui| {
                    //-----------------------------------------------------------------------------------------------------------------------------------------------
                    distance_window.show(ctx, |ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Distance (lightyears)")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response = ui.add(egui::TextEdit::singleline(&mut self.distance_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.distance = self.distance_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{} ly", self.distance)).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        self.distance_km = self.distance * 9.461 * 10_f64.powf(12.);
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{} km", self.distance_km)).monospace());
                    });
                });
            }

            let ra_window = egui::Window::new("Right ascension")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.pos_vel_toggle == true {
                ui.vertical(|ui| {
                    //-----------------------------------------------------------------------------------------------------------------------------------------------
                    ra_window.show(ctx, |ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Right ascension")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Hours (h)")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.right_ascension_h_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.right_ascension_h =
                                self.right_ascension_h_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{}h", self.right_ascension_h)).monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Minutes (m)")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response = ui.add(egui::TextEdit::singleline(
                            &mut self.right_ascension_min_str,
                        ));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.right_ascension_min =
                                self.right_ascension_min_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{}m", self.right_ascension_min)).monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Seconds (s)")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.right_ascension_s_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.right_ascension_s =
                                self.right_ascension_s_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{}s", self.right_ascension_s)).monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        self.right_ascension = (self.right_ascension_h * 15.)
                            + (self.right_ascension_min * (1. / 4.))
                            + (self.right_ascension_s * (1. / 240.));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Total")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{}°", self.right_ascension)).monospace());
                    });
                });
            }

            let dec_window = egui::Window::new("Declination")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.pos_vel_toggle == true {
                ui.vertical(|ui| {
                    //-----------------------------------------------------------------------------------------------------------------------------------------------
                    dec_window.show(ctx, |ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Declination")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Degrees (°)")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.declination_degree_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.declination_degree =
                                self.declination_degree_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{}°", self.declination_degree)).monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Minutes (')")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.declination_min_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.declination_min =
                                self.declination_min_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{}'", self.declination_min)).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Seconds ('')")).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.declination_s_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.declination_s = self.declination_s_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{}''", self.declination_s)).monospace());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        self.declination = self.declination_degree
                            + (self.declination_min / 60.)
                            + (self.declination_s / 3600.);
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Total")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("{}°", self.declination)).monospace());
                    });
                });
            }

            let rv_window = egui::Window::new("Radial velocity")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.pos_vel_toggle == true {
                ui.vertical(|ui| {
                    //-----------------------------------------------------------------------------------------------------------------------------------------------
                    rv_window.show(ctx, |ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Radial velocity (km/s)")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.radial_velocity_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.radial_velocity =
                                self.radial_velocity_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{} km/s", self.radial_velocity)).monospace(),
                        );
                    });
                });
            }

            let pm_window = egui::Window::new("Proper motion")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.pos_vel_toggle == true {
                //-----------------------------------------------------------------------------------------------------------------------------------------------
                pm_window.show(ctx, |ui| {
                    ui.vertical(|ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Proper motion")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("Right ascension (arcsecons/year)"))
                                .monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.proper_motion_ra_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.proper_motion_ra =
                                self.proper_motion_ra_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{} as/yr", self.proper_motion_ra))
                                .monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("Declination (arcsecons/year)")).monospace(),
                        );
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        let response =
                            ui.add(egui::TextEdit::singleline(&mut self.proper_motion_dec_str));
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        if response.lost_focus() && ui.input().key_pressed(egui::Key::Enter) {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            self.proper_motion_dec =
                                self.proper_motion_dec_str.clone().parse().unwrap();
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        }
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(
                            egui::Label::new(format!("{} as/yr", self.proper_motion_dec))
                                .monospace(),
                        );
                    });
                });
            }

            let export_window = egui::Window::new("Export file")
                .auto_sized()
                .collapsible(true)
                .resizable(false);

            if self.export_toggle == true {
                //-----------------------------------------------------------------------------------------------------------------------------------------------
                export_window.show(ctx, |ui| {
                    ui.vertical(|ui| {
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.add(egui::Label::new(format!("Export file")).heading());
                        //-----------------------------------------------------------------------------------------------------------------------------------------------
                        ui.horizontal_wrapped(|ui| {
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            if ui.add(egui::Button::new("JSON")).clicked() {
                                //-----------------------------------------------------------------------------------------------------------------------------------------------
                                export_json(
                                    self.x,
                                    self.y,
                                    self.z,
                                    self.x_v,
                                    self.y_v,
                                    self.z_v,
                                    self.name_str.clone(),
                                );
                                //-----------------------------------------------------------------------------------------------------------------------------------------------
                            }
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                            if ui.add(egui::Button::new("TXT")).clicked() {
                                //-----------------------------------------------------------------------------------------------------------------------------------------------
                                export_txt(
                                    self.x,
                                    self.y,
                                    self.z,
                                    self.x_v,
                                    self.y_v,
                                    self.z_v,
                                    self.name_str.clone(),
                                );
                                //-----------------------------------------------------------------------------------------------------------------------------------------------
                            }
                            //-----------------------------------------------------------------------------------------------------------------------------------------------
                        });
                    });
                });
            }
        });
    }
}
